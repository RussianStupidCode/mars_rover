// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	context "context"
	rovers "rover/pkg/rovers"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Rover is an autogenerated mock type for the Rover type
type Rover struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Rover) Close() {
	_m.Called()
}

// Direction provides a mock function with given fields: ctx
func (_m *Rover) Direction(ctx context.Context) (rovers.Direction, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Direction")
	}

	var r0 rovers.Direction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (rovers.Direction, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) rovers.Direction); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(rovers.Direction)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MoveBackward provides a mock function with given fields: ctx
func (_m *Rover) MoveBackward(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for MoveBackward")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MoveForward provides a mock function with given fields: ctx
func (_m *Rover) MoveForward(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for MoveForward")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Ping provides a mock function with given fields: ctx
func (_m *Rover) Ping(ctx context.Context) (time.Duration, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 time.Duration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (time.Duration, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) time.Duration); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Position provides a mock function with given fields: ctx
func (_m *Rover) Position(ctx context.Context) (int, int, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Position")
	}

	var r0 int
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context) (int, int, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context) int); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// TurnLeft provides a mock function with given fields: ctx
func (_m *Rover) TurnLeft(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for TurnLeft")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TurnRight provides a mock function with given fields: ctx
func (_m *Rover) TurnRight(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for TurnRight")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRover creates a new instance of Rover. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRover(t interface {
	mock.TestingT
	Cleanup(func())
}) *Rover {
	mock := &Rover{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
